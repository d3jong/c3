diff --git a/src/main.rs b/src/main.rs
index f5dcb9f..29dd861 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -16,7 +16,7 @@ use todo_app::App;
 use fileio::get_todo_path;
 //}}}
 
-#[derive(Parser, Debug)]
+#[derive(Parser, Debug, Clone)]
 #[command(author, version, about, long_about = None)]
 pub struct DisplayArgs{
     /// Show done todos too
@@ -33,7 +33,7 @@ pub struct DisplayArgs{
 }
 
 /// A tree-like todo application that makes you smile
-#[derive(Parser, Debug)]
+#[derive(Parser, Debug, Clone)]
 #[command(author, version, about, long_about = None)]
 pub struct Args {
     /// Performance mode, don't read dependencies
@@ -101,18 +101,26 @@ impl Args {
 
 fn main() -> io::Result<()> {
     let args = Args::parse();
-    let is_cli = args.is_cli();
-    let mut app = App::new(args);
-
-    if is_cli {
-        cli_app::run(&mut app)
-    } else {
-        match tui_app::run(&mut app) {
-            Ok(_)=>{Ok(())}
-            err => {
-                tui_app::shutdown()?;
-                err
-            }
+    for _ in 0..2 {
+        let mut app = App::new(args.clone());
+        use std::time::Instant;
+        for _ in 0..1000 {
+            let now = Instant::now();
+            app.set_current_priority(8);
+            app.reorder_current();
+            let elapsed = now.elapsed();
+            println!("{:.2?}", elapsed);
         }
+        app.go_bottom();
+
+        for _ in 0..1000 {
+            let now = Instant::now();
+            app.set_current_priority(1);
+            app.reorder_current();
+            let elapsed = now.elapsed();
+            println!("{:.2?}", elapsed);
+        }
+        
     }
+    Ok(())
 }
