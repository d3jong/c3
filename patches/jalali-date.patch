diff --git a/Cargo.lock b/Cargo.lock
index 8bd32b6..c01bbf4 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -141,7 +141,9 @@ dependencies = [
  "criterion",
  "crossterm",
  "home",
+ "jalali-date",
  "ratatui",
+ "scanf",
  "sha1",
  "tui-textarea",
 ]
@@ -523,6 +525,12 @@ version = "1.0.11"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "49f1f14873335454500d59611f1cf4a4b0f786f9ac11f4312a78e4cf2566695b"
 
+[[package]]
+name = "jalali-date"
+version = "0.2.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "d4de89bd2cecffc3235b702c93c504136ef8ebf3c2a934d34297032fb83dec07"
+
 [[package]]
 name = "js-sys"
 version = "0.3.70"
@@ -569,6 +577,12 @@ version = "2.7.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3"
 
+[[package]]
+name = "minimal-lexical"
+version = "0.2.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "68354c5c6bd36d73ff3feceb05efa59b6acb7626617f4962be322a825e61f79a"
+
 [[package]]
 name = "mio"
 version = "0.8.10"
@@ -581,6 +595,16 @@ dependencies = [
  "windows-sys 0.48.0",
 ]
 
+[[package]]
+name = "nom"
+version = "7.1.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "d273983c5a657a70a3e8f2a01329822f3b8c8172b73826411a55751e404a0a4a"
+dependencies = [
+ "memchr",
+ "minimal-lexical",
+]
+
 [[package]]
 name = "num-traits"
 version = "0.2.17"
@@ -775,6 +799,15 @@ dependencies = [
  "winapi-util",
 ]
 
+[[package]]
+name = "scanf"
+version = "1.2.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1af23b806e681b4f838a9887655219b755a418f60353968a88b0b87a35b3e8ce"
+dependencies = [
+ "nom",
+]
+
 [[package]]
 name = "scopeguard"
 version = "1.2.0"
diff --git a/Cargo.toml b/Cargo.toml
index 1e35659..2aea84d 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -12,6 +12,8 @@ tui-textarea = "0.4.0"
 chrono = "0.4.31"
 clap = { version = "4.4.18", features = ["derive", "string"] }
 clap_complete = "4.5.9"
+jalali-date = "0.2.0"
+scanf = "1.2.1"
 
 [profile.release]
 codegen-units = 1
diff --git a/src/date.rs b/src/date.rs
index 2c5aa57..12d7d3e 100644
--- a/src/date.rs
+++ b/src/date.rs
@@ -1,5 +1,7 @@
 use chrono::format::ParseError;
-use chrono::{Duration, Local, NaiveDate};
+use chrono::{Datelike, Duration, Local, NaiveDate};
+use jalali_date::{jalali_to_gregorian, to_jalali, JalaliDate};
+use scanf::sscanf;
 const FORMAT: &str = "%Y-%m-%d";
 
 pub type Type = NaiveDate;
@@ -9,9 +11,42 @@ pub fn parse(date_string: &str) -> Result<Type, ParseError> {
     NaiveDate::parse_from_str(date_string, FORMAT)
 }
 
+#[inline]
+fn jalali_to_georgian_naive(j_year: i32, j_month: i32, j_day: i32) -> Option<Type> {
+    let g_date = jalali_to_gregorian(j_year, j_month, j_day);
+    NaiveDate::from_ymd_opt(g_date.year, g_date.month as u32, g_date.day as u32)
+}
+
+#[inline]
+fn naive_to_jalali(date: NaiveDate) -> JalaliDate {
+    to_jalali(date.day() as u16, date.month() as u16, date.year() as u16).unwrap()
+}
+
+#[derive(Debug)]
+pub enum Error {
+    ParseFailed,
+}
 #[inline(always)]
-pub fn parse_user_input(date_string: &str) -> Result<Type, ParseError> {
-    parse(date_string)
+pub fn parse_user_input(date_string: &str) -> Result<Type, Error> {
+    let mut j_year = 0;
+    let mut j_month = 0;
+    let mut j_day = 0;
+    match date_string {
+        _ if sscanf!(date_string, "{}-{}-{}", j_year, j_month, j_day).is_ok() => {
+            if let Some(date) = jalali_to_georgian_naive(j_year, j_month, j_day) {
+                return Ok(date);
+            }
+        }
+        _ if sscanf!(date_string, "{}-{}", j_month, j_day).is_ok() => {
+            let current_j_date = naive_to_jalali(current());
+            if let Some(date) = jalali_to_georgian_naive(current_j_date.year as i32, j_month, j_day)
+            {
+                return Ok(date);
+            }
+        }
+        _ => {}
+    }
+    Err(Error::ParseFailed)
 }
 
 #[inline]
@@ -27,9 +62,15 @@ pub fn format(input: Option<Type>) -> String {
     }
 }
 
-#[inline(always)]
+#[inline]
 pub fn display(input: Option<Type>) -> String {
-    format(input)
+    match input {
+        Some(date) => {
+            let j_date = naive_to_jalali(date);
+            format!("{}-{:0>2}-{:0>2}", j_date.year, j_date.month, j_date.day)
+        }
+        None => String::new(),
+    }
 }
 
 #[inline]
